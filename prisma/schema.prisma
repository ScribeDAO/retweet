datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// -----------------------------------------------------------------------------
// These tables are required by next-auth
// https://next-auth.js.org/v3/adapters/prisma#setup

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  roles         Roles[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// -----------------------------------------------------------------------------

// A user has a post which can have tags
model Post {
  id       String @id @default(cuid())
  tweetId  String @unique
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  tags Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// tags can belong to many posts
model Tag {
  id   String @id @default(cuid())
  name String

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id        String @id @default(cuid())
  name      String
  discordId String @unique // Role ID in discord

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
